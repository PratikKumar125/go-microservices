package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/PratikKumar125/go-microservices/graphql/graph/model"
	usersgrpc "github.com/PratikKumar125/go-microservices/users/usersrpc"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, name *string, email *string) ([]*model.User, error) {
	inputs := &usersgrpc.GetUserByEmailInput{
		Email: *email,
		Name:  *name,
	}

	rpcUsers, err := r.UserRpcClient.GetUserByEmail(ctx, inputs)
	if err != nil {
		panic(fmt.Errorf("error getting users from rpc method GetUserByEmail %v", err))
	}

	users := make([]*model.User, len(rpcUsers.Users))
	for idx, user := range rpcUsers.Users {
		users[idx] = &model.User{
			ID:    user.Id,
			Name:  user.Name,
			Email: user.Email,
		}
	}
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
